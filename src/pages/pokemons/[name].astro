---
import type { GetStaticPaths } from "astro";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import Title from "@components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=160");
  const { results } = (await resp.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
---

<MainLayout title="AlgÃºn pokemon">
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex flex-row justify-between items-center gap-4">
      <div>
        <button onclick="history.back()" class="text-blue-500">Regresar</button>
        <Title>{name}</Title>
      </div>
      <button id="btn-favorite" data-name={name} data-id={id}>
        <Icon data-empty name="heart-empty" size={40} class="text-red-500" />
        <Icon
          data-filled
          name="heart-filled"
          size={40}
          class="text-red-500 hidden"
        />
      </button>
    </div>
    <PokemonCard name={name} url={url} isBig />
    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<script>
  import type { FavoritePokemon } from "@interfaces/favorite-pokemon";
  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";

    const heartEmpty = btnFavorite.querySelector("[data-empty]") as HTMLElement;
    const heartFilled = btnFavorite.querySelector(
      "[data-filled]"
    ) as HTMLElement;

    const isFavorite = favoritePokemons.some(
      (pokemon) => pokemon.id === Number(id)
    );

    if (isFavorite) {
      heartEmpty.classList.add("hidden");
      heartFilled.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some(
        (pokemon) => pokemon.id === Number(id)
      );

      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter(
          (pokemon) => pokemon.id !== Number(id)
        );
      } else {
        favoritePokemons.push({
          name: name,
          id: Number(id),
        });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener("click", () => {
      heartEmpty.classList.toggle("hidden");
      heartFilled.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply cursor-pointer;
    @apply hover:animate-pulse;
  }
</style>
